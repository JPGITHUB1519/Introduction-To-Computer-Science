# THREE GOLD STARS
# Question 3-star: Elementary Cellular Automaton

# Please see the video for additional explanation.

# A one-dimensional cellular automata takes in a string, which in our 
# case, consists of the characters '.' and 'x', and changes it according 
# to some predetermined rules. The rules consider three characters, which 
# are a character at position k and its two neighbours, and determine 
# what the character at the corresponding position k will be in the new 
# string.

# For example, if the character at position k in the string  is '.' and 
# its neighbours are '.' and 'x', then the pattern is '..x'. We look up 
# '..x' in the table below. In the table, '..x' corresponds to 'x' which 
# means that in the new string, 'x' will be at position k.

# Rules:
#          pattern in         position k in        contribution to
# Value    current string     new string           pattern number
#                                                  is 0 if replaced by '.'
#                                                  and value if replaced
#                                                  by 'x'
#   1       '...'               '.'                        1 * 0
#   2       '..x'               'x'                        2 * 1
#   4       '.x.'               'x'                        4 * 1
#   8       '.xx'               'x'                        8 * 1
#  16       'x..'               '.'                       16 * 0
#  32       'x.x'               '.'                       32 * 0
#  64       'xx.'               '.'                       64 * 0
# 128       'xxx'               'x'                      128 * 1
#                                                      ----------
#                                                           142

# To calculate the patterns which will have the central character x, work 
# out the values required to sum to the pattern number. For example,
# 32 = 32 so only pattern 32 which is x.x changes the central position to
# an x. All the others have a . in the next line.

# 23 = 16 + 4 + 2 + 1 which means that 'x..', '.x.', '..x' and '...' all 
# lead to an 'x' in the next line and the rest have a '.'

# For pattern 142, and starting string
# ...........x...........
# the new strings created will be
# ..........xx...........  (generations = 1)
# .........xx............  (generations = 2)
# ........xx.............  (generations = 3)
# .......xx..............  (generations = 4)
# ......xx...............  (generations = 5)
# .....xx................  (generations = 6)
# ....xx.................  (generations = 7)
# ...xx..................  (generations = 8)
# ..xx...................  (generations = 9)
# .xx....................  (generations = 10)

# Note that the first position of the string is next to the last position 
# in the string.

# Define a procedure, cellular_automaton, that takes three inputs: 
#     a non-empty string, 
#     a pattern number which is an integer between 0 and 255 that
# represents a set of rules, and 
#     a positive integer, n, which is the number of generations. 
# The procedure should return a string which is the result of
# applying the rules generated by the pattern to the string n times.

#getting components
def getcomponents(n) :

	elements = []

	if n >= 128 :

		n = n - 128
		elements.append(128)

	if n >= 64 :

		n = n - 64
		elements.append(64)

	if n >= 32 :

		n = n - 32
		elements.append(32)

	if n >= 16:

		n = n - 16
		elements.append(16)

	if n >= 8 :

		n = n - 8
		elements.append(8)

	if n >= 4 :

		n = n - 4
		elements.append(4)

	if n >= 2 :

		n = n - 2
		elements.append(2)

	if n >= 1 :
		n = n - 1
		elements.append(1)

	return elements

#method to change the values and do the comparisons
def convert(string, struct) :

	new_string = ""

	for i in range(0, len(string)) :

		if i == len(string)-1 :

			aux = string[i-1] + string[i] + string[0]
		else :
			aux = string[i-1] + string[i] + string[i+1]

		new_string = new_string + struct[aux]

	return new_string


	

def cellular_automaton(string, pattern_number, generation):

	#  1 - get components of the number
	#  2 - create pattern current string
	#  3 - create pattern new string with the true values
	#  4 - create dictionary struct with all values 
	#  5- create procedure convert to apply comparisons and convertions
	#  6- do a cicle that finish when the cond is less than the generation

	new_string = ""

	pattern_current_string = {1: '...', 2 : '..x', 4 : '.x.', 8 : '.xx', 16 : 'x..', 32 : 'x.x', 64 : 'xx.', 128 : 'xxx'  }

	components = getcomponents(pattern_number)

	pattern_new_string =  {1: '', 2 : '', 4 : '', 8 : '', 16 : '', 32 : '', 64 : '', 128 : ''  }
	struct = {}

	for i in pattern_current_string :

		if i in components :

			pattern_new_string[i] = 'x'

		else :

			pattern_new_string[i] = '.'

	
	pcsv = pattern_current_string.values()
	pnsv = pattern_new_string.values()

	#getting struct with all values
	for i in range(0, len(pcsv)) :

		struct[pcsv[i]] = pnsv[i]

	#cicle to apply the rules generated by the pattern to the string n times
	for i in range(0,generation) :

		string = convert(string, struct)

	return string


	
#print cellular_automaton('..xxx...',30, 2)
#print cellular_automaton('.x.x.x.x.',142, 2)
#>>> xxxxxxx..



print cellular_automaton('.x.x.x.x.', 17, 2)
#>>> xxxxxxx..
print cellular_automaton('.x.x.x.x.', 249, 3)
#>>> .x..x.x.x
print cellular_automaton('...x....', 125, 1)
#>>> xx.xxxxx
print cellular_automaton('...x....', 125, 2)
#>>> .xxx....
print cellular_automaton('...x....', 125, 3)
#>>> .x.xxxxx
print cellular_automaton('...x....', 125, 4)
#>>> xxxx...x
print cellular_automaton('...x....', 125, 5)
#>>> ...xxx.x
print cellular_automaton('...x....', 125, 6)
#>>> xx.x.xxx
print cellular_automaton('...x....', 125, 7)
#>>> .xxxxx..
print cellular_automaton('...x....', 125, 8)
#>>> .x...xxx
print cellular_automaton('...x....', 125, 9)
#>>> xxxx.x.x
print cellular_automaton('...x....', 125, 10)
#>>> ...xxxxx
